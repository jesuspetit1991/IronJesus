-- Lab SQL basics (selection and aggregation)

-- 1- Get the id values of the first 5 clients from district_id with a value equals to 1.
use bank;
select client;
select client_id from client where district_id= 1 limit 5;

-- 2- In the client table, get an id value of the last client where the district_id equals to 72
select client_id from client where district_id= 72 order by client_id desc limit 1;
select * from client where district_id= 72 order by client_id desc limit 1;

-- 3- Get the 3 lowest amounts in the loan table.
select loan;
select amount from loan order by amount asc limit 3;

-- 4- What are the possible values for status, ordered alphabetically in ascending order in the loan table?
select loan;
select distinct status from loan order by status asc;

-- 5- What is the loan_id of the highest payment received in the loan table?
select status from loan;
select loan_id from loan where status= "C" order by payments ASC limit 1;

-- 6- What is the loan amount of the lowest 5 account_ids in the loan table? Show the account_id and the corresponding amount
select amount from loan order by account_id asc limit 5;

-- 7- What are the account_ids with the lowest loan amount that have a loan duration of 60 in the loan table?
select account_id from loan where duration= 60 order by amount asc limit 5;

-- 8- What are the unique values of k_symbol in the order table?
select bank.order;
select k_symbol from bank.order;
select distinct k_symbol from bank.order where k_symbol !="" order by k_symbol asc;

-- 9- In the order table, what are the order_ids of the client with the account_id 34?
select bank.order;
select order_id from bank.order where account_id= 34;

-- 10- In the order table, which account_ids were responsible for orders between order_id 29540 and order_id 29560 (inclusive)?
select bank.order;
select distinct account_id from bank.order where order_id between "29540" and "29560";

-- 11- In the order table, what are the individual amounts that were sent to (account_to) id 30067122?
select bank.order;
select distinct amount as answer from bank.order where account_to= 30067122;

-- 12- In the trans table, show the trans_id, date, type and amount of the 10 first transactions from account_id 793 in chronological order, 
-- from newest to oldest.

select * from trans;
select date from trans;
select distinct trans_id, date, type, amount from trans where account_id= 793 order by date desc limit 10;

-- 13-  In the client table, of all districts with a district_id lower than 10, how many clients are from each district_id? 
-- Show the results sorted by the district_id in ascending order.

select * from client;
select count(client_id) as total_clients, district_id as district_number from client where district_id < 10 group by district_number order by district_id asc;

-- 14- In the card table, how many cards exist for each type? Rank the result starting with the most frequent type.
select * from card;
select count(card_id) as total_cards, type as type_name from card group by type_name order by total_cards desc;

-- 15- Using the loan table, print the top 10 account_ids based on the sum of all of their loan amounts.
select * from loan;
select account_id as top_accounts, sum(amount) as total_loan from loan group by top_accounts order by total_loan desc limit 10;

-- 16- In the loan table, retrieve the number of loans issued for each day, before (excl) 930907, ordered by date in descending order.
select * from loan;
select count(loan_id) as number_loans, date as date_loan from loan where date < "930907" group by date order by date desc;

-- 17- In the loan table, for each day in December 1997, count the number of loans issued for each unique loan duration, ordered by date and duration, 
-- both in ascending order. You can ignore days without any loans in your output.
create database if not exists bank_demo;
select * from loan;
select date, duration, date_format(left(date,6), "%M %Y") as new_date from loan where date between "971206" and "971227" order by date asc;

-- 18- In the trans table, for account_id 396, sum the amount of transactions for each type (VYDAJ = Outgoing, PRIJEM = Incoming). Your output should have the account_id, the type and the sum of amount, named as total_amount. Sort alphabetically by type.
select * from trans;
select account_id, type, sum(amount) as sum_amount from trans where account_id= 396
group by type;

-- 19- From the previous output, translate the values for type to English, rename the column to transaction_type, round total_amount down to an integer
select * from trans;
select account_id, type as transaction_type, round(sum(amount), 0) as sum_amount from trans where account_id= 396
group by type;

-- 20- From the previous result, modify your query so that it returns only one row, with a column for incoming amount, outgoing amount and the difference.


-- 21- Continuing with the previous example, rank the top 10 account_ids based on their difference.